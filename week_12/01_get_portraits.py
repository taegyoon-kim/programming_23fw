# -*- coding: utf-8 -*-
"""01_get_portraits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y11Hr7kQMJYZL1sSdKY2JZHp3mekTqiN

### **Getting Portraits of U.S. Presidents from Wikipedia**

Load modules
"""

from bs4 import BeautifulSoup
import requests

"""Access the html to generate a Repsonse object"""

r = requests.get('https://en.wikipedia.org/wiki/Jimmy_Carter') # fetch the page
type(r) # a response object

"""We have the html code at hand"""

r.text # access the html text

"""Generate a BS object"""

soup = BeautifulSoup(r.text) # transform the html text into a Beauiful Soup object
type(soup)

"""Get the title"""

soup.title # get the title tag

"""Let's get Carter's portrait (the actual source file), on the right side of the page"""

soup.find_all('img')

"""Too broad. We get many things we do not need. Let's use the attribute `alt`

Note that `alt` stands for "alterantive text" (serving accessability and search engine optimization)
"""

soup.find_all(alt = 'Portrait of Jimmy Carter in a dark blue suit')

"""This seems to have worked. We have a ResultSet with one item. We can use the `get()` method on that one item to get the `src` attribute, which is the source file."""

soup.find_all(alt = 'Portrait of Jimmy Carter in a dark blue suit')[0].get('src')

"""We still have a problem though: programming is most useful for repeated tasks---it is rarely done for one-off, ad hoc problems

If we only want the one source file for Jimmy Carter's portrait, we could simply use the web browser

What if we wanted the portrait for a broad range of people on Wikipedia? Maybe all U.S. presidents? The alt text approach will not work because all of them will have a different text

Fortunately, the portrait is embedded in an unique structure relative to other figures

There is only one `infobox` in the page. That distinguishes that image from the rest of the document. We can inspect and see that the `img` is inside another tag with class `infobox-image`.
"""

rs = soup.find_all(class_ = 'infobox-image')

"""`find_all` is useful in verifying that we only get one unique result---which we do in this case, as expected.

After we make sure, we can use `find` to get only that one element rather than a list. (If we use `find` directly, we don't know if we're getting first out of many elements or the only unique element.)
"""

print(type(rs))
print(len(rs))

"""Now, we need to navigate to the descendant objects. `prettify()` can help see the hierarchy better:"""

infobox_image = soup.find(class_ = 'infobox-image') # this is a td tag
print(infobox_image.prettify()) # the img tag is inside the td tag

"""There are two tags that are direct descendants: `<a>` and `<span>`. The `<img>` tag is in the `<a>` tag."""

infobox_image.span.a.img

"""But because there is only one `<img>` tag inside the whole object, we can directly go there:"""

infobox_image.img

"""We navigated back to the same object without making a reference to "Portrait of a man in a blue suit". We can get the 'src' the same way:"""

infobox_image.img.get('src')

"""Now, we have a generic way of getting the source file for the portrait in the information box for a Wikipedia file. Let's put all of the code together:"""

page = 'https://en.wikipedia.org/wiki/Jimmy_Carter'
r = requests.get(page)
soup = BeautifulSoup(r.text)
infobox_image = soup.find(class_ = 'infobox-image')
infobox_image.img.get('src')

"""The link requires the addition of `https:` in the beginning to work:"""

'https:' + infobox_image.img.get('src')

"""It's not difficult to see how this could be a function where the input is the Wikipedia page, and output is a link to the source image file"""

def get_portrait(page):
    r = requests.get(page)
    soup = BeautifulSoup(r.text)
    infobox_image = soup.find(class_ = 'infobox-image')
    url = 'https:' + infobox_image.img.get('src')
    return url

"""Let's test for another page:"""

p = get_portrait('https://en.wikipedia.org/wiki/Walter_White_(Breaking_Bad)')

"""Print and download"""

from IPython.display import Image
Image(p)

response = requests.get(p)
with open("WW.jpg", "wb") as f:
    f.write(response.content)