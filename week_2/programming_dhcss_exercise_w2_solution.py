# -*- coding: utf-8 -*-
"""programming_dhcss_exercise_w2_solution

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WjisdDJzRTEHr8Ukqa2U83A9ZN__rMGw

Programming for DHCSS Exercises: Week 2. Branching and Iteration
"""

### Problem 1 ###

### Using the variables below, write a code that generates the following string: "umbrella ella ella ella "

once = "umbr"
repeat = "ella"

### Write your code here

once + (4 * (repeat + " "))

### Problem 2 ###

### Using a for loop write a code that counts the number of characters in the string named "example_string"

example_string = "World’s largest rice exporter’s abrupt ban has triggered global panic - but its own farmers are bearing the brunt"

### Start with a counter variable

count = 0

### Write your code here

count = 0
for char in example_string:
  count += 1
print(count)
print(len(example_string))

### Problem 3 ###

### Suppose you wanted to multiply a number (here, 1) by 2 and keep iterating that until the product of the numbers exceeds 150

### Use a while loop and print the result (the multipied number) from each iteration

number = 1

### Write your code here

while number < 150:
  print(number)
  number = number * 2

### Problem 4 ###

### Write a for loop which prints "Hello!, " plus each name in the following list. i.e.: "Hello, Sam!"

lst = ["Sam", "Lisa", "Micha", "Dave", "Wyatt", "Emma", "Sage"]

### Also, do the same but only when the name invovles "e" (you can use "in" operator for this)

### Write your code here

for i in lst:
    print("Hello, " + i + "!" + "\n")

for i in lst:
  if "e" in i:
    print("Hello, " + i + "!")

### Problem 5 ###

### You will get data on news articles.

### Write a for loop to go through the "month" column and count the number of articles that were published in April or December

### Run this code to get the data

import pandas as pd # import pandas library shortened as pd
url = "https://github.com/taegyoon-kim/programming_dhcss_23fw/raw/main/week_2/news_category.xlsx" # string containig the url
df = pd.read_excel(url) # read_excel function to read xlsx files

### Check the data

print(type(df))
print(df.head(5)) # method that shows the first N (=5) rows of the data
print(df.dtypes) # data type for each column

### The "month" column can be accessed like the following

df['month']

### Write your code here

count = 0
for i in df['month']:
  if i == '4.0' or i == '12.0':
    count += 1

print(count)

df['month'].value_counts()

### Problem 6 ###

### Use the same data to write a code that counts the number of articles by "theme" using a for loop and if, elif, and else statements

### Use the following counters for each category: Politics, Entertainment, and Others

count_politics = 0
count_entertainment = 0
count_others = 0

### Write your code here

for theme in df['theme']:
    if theme == 'politics':
        count_politics += 1
    elif theme == 'entertainment':
        count_entertainment += 1
    else:
        count_others += 1

print(count_politics, count_entertainment, count_others)

print(df['theme'].value_counts())

# Problem 7

### With the same data, write a for loop code to creaet a list containing the word count for articles

### Exclude articles with too few words (<50) or too many words (>500)

### You create an empty list named "word_counts" and append the word count from each iteration (you can use "append" method within the loop)

word_counts = []

### See below for how append() works

empty_lst = []
for i in range(0, 3):
  empty_lst.append(i)
print(empty_lst)

### Use split() method to parse an article text into words

text = 'this is a text'
text_spt = text.split()
print(text_spt)

### Skip the outliers usings statements like break, continue, or pass (<50 or >500)

### Write your code here

for content in df['content']:

    word_count = len(content.split())

    if word_count < 50 or word_count > 500:
        continue

    word_counts.append(word_count)

average_word_count = sum(word_counts) / len(word_counts)
print(average_word_count)

import numpy as np # alternatively use np.mean()
average_word_count2 = np.mean(word_counts)
print(average_word_count2)

### Problem 8 ###

### You are given two lists, one containing names of fruits and the other containing their corresponding colors.

### Write a for loop code that prints a statement like the following

### E.g.,: "The color of Apple is Red."

### If the fruit's name is great than 5 characters, just print "Too long."

### Consider using "zip()"

fruits = ['Apple', 'grape', 'Cherry', 'Avocado']
colors = ['Red', 'Green', 'Red', 'Brown', 'Green']

### Write your code here

for fruit, color in zip(fruits, colors):
  if len(fruit) <= 5:
    print(f"The color of {fruit} is {color}.")
  else:
    print("Too long")

### Problem 9 ###

### Write a code that extracts hashtags from the following list of tweet texts

### Hashtags in tweets are words that start with the symbol #

### You are given a list of tweet texts

tweets = [
    "Learning Python is fun! #Python #coding",
    "Data science is awesome. #datascience #machinelearning",
    "Artificial Intelligence: The future! #AI #future",
    "Study at KAIST for #CT #DHCSS #DS"]

### Initialize an empty list to store hashtags (and append exracted hashtags to it!)

hashtags = []

### Use a for loop to iterate through tweets

### Inside the loop, use another for loop to iterate through words in a given tweet

### Use conditional statements to identify whether a word is a hashtag

### Hint I: use split a tweet into a list of words using split() method

### Hint II: use startswith() method to see if a word is a hashtag or not

### Write your code here

for tweet in tweets:
    words = tweet.split() # Split the tweet into words
    # Use another for loop to iterate through each word in the tweet
    for word in words:
        if word.startswith('#'): # Identify whether a word is a hashtag
            hashtags.append(word) # Append the cleaned hashtags to the list

print(hashtags)

### Problem 10

### You are given a list of comments from social surveys conducted in different communities

### The comments can be categorized as "Positive," "Neutral," or "Negative" based on specific keywords

### Your task is to count how many comments fall under each category for each community and print the counts

### If a comment contains the word "good," categorize it as "Positive" & If a comment contains the word "bad," categorize it as "Negative" & If a comment contains neither, categorize it as "Neutral"

### Use a nested for loop to iterate through the list of communities and their comments

### Use if-elif-else statements to categorize each comment

### Count the number of comments in each category for each community

### Write your code here

# Sample comments from social surveys in different communities
community_comments = {
    "Community A": ["This place is so good!", "I had a bad experience."],
    "Community B": ["It's an average community.", "Good people around."],
    "Community C": ["Not good, not bad.", "I love it here!"]
    }

# Iterate through each community and its list of comments
for community, comments in community_comments.items():
    # Initialize counters for each category
    positive_comments = 0
    neutral_comments = 0
    negative_comments = 0

    # Categorize each comment within the community
    for comment in comments:
        if "good" in comment.lower():
            positive_comments += 1
        elif "bad" in comment.lower():
            negative_comments += 1
        else:
            neutral_comments += 1

    # Print the counts for each category in the current community
    print(f"{community}:")
    print(f"  Positive Comments: {positive_comments}")
    print(f"  Neutral Comments: {neutral_comments}")
    print(f"  Negative Comments: {negative_comments}")
    print()  # Add an empty line for better readability